<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DataBase on sixiyida</title>
        <link>https://sixiyida.github.io/tags/database/</link>
        <description>Recent content in DataBase on sixiyida</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>sixiyida</copyright>
        <lastBuildDate>Wed, 28 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sixiyida.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MySQL</title>
        <link>https://sixiyida.github.io/p/mysql/</link>
        <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
        
        <guid>https://sixiyida.github.io/p/mysql/</guid>
        <description>&lt;h3 id=&#34;锁&#34;&gt;锁
&lt;/h3&gt;&lt;h4 id=&#34;行级锁&#34;&gt;行级锁
&lt;/h4&gt;&lt;p&gt;**行级锁：**在select for update等场景，即当前读（另一种是快照读MVCC）场景使用。&lt;/p&gt;
&lt;p&gt;包括Record Lock, Gap Lock 和 Next-key Lock(前两种的合并)&lt;/p&gt;
&lt;p&gt;包括X(Exclusive)和S(share)两种&lt;/p&gt;
&lt;p&gt;Gap Lock是只锁相邻两条记录之间的()，NK-lock是锁(]&lt;/p&gt;
&lt;p&gt;Gap Lock的X和S型是一样的，都可以重复获取，NK-lock要看右区间的记录锁是否互斥，无限除外。&lt;/p&gt;
&lt;h5 id=&#34;怎么加mysql8026-可重复读&#34;&gt;怎么加？（MySQL8.0.26, 可重复读）
&lt;/h5&gt;&lt;p&gt;对索引加，基本单位是nk-lock，不同情况可能出现退化为前两种&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主键索引等值查询：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录存在-&amp;gt;退化为记录&lt;/p&gt;
&lt;p&gt;记录不存在-&amp;gt;退化为间隙锁&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;performance_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_locks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;查加了什么锁&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果MODE是GAP， LOCK_DATA是右区间界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主键索引范围查询：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大于：不退化&lt;/p&gt;
&lt;p&gt;大于等于：如果等于存在，则左边退化为记录锁，不存在则不退化&lt;/p&gt;
&lt;p&gt;小于：最右侧退化为间隙锁&lt;/p&gt;
&lt;p&gt;小于等于：若等于存在，则不退化，不存在则最右侧退化为间隙锁&lt;/p&gt;
&lt;p&gt;**注：**记录锁属于记录，在GAP锁中是属于LOCK_DATA，右区间界的记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二级索引（非唯一）等值查询：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录不存在：二级索引上GAPLOCK，对于左右端点，能否插入要看二级索引B+树下一条记录有无GAPLOCK&lt;/p&gt;
&lt;p&gt;记录不存在的&lt;strong&gt;特殊情况&lt;/strong&gt;：如果是超过了最大id，是next-keyLock&lt;/p&gt;
&lt;p&gt;注：二级索引GAPLOCK的LOCK_DATA包含&lt;strong&gt;两个值&lt;/strong&gt;，二级索引和回表的主键索引&lt;/p&gt;
&lt;p&gt;记录存在：对二级索引匹配的记录加nk锁，对不匹配的第一个nk锁退化为间隙锁，且在主键索引加记录锁。&lt;/p&gt;
&lt;p&gt;对于端点是否能插入，和要看二级索引B+树下一条记录有无LOCK&lt;/p&gt;
&lt;p&gt;在不匹配的第一个索引加nk锁的目的：防止幻读（id &amp;gt; lock_id）的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二级索引（非唯一）范围查询：不退化，二级的nk和主键的记录锁都加&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不走索引全表扫描，则所有记录全部加nk锁，全锁，是事故&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决方案：将sql_safe_updates设置为1，此时必须使用where+索引 / limit&lt;/p&gt;
&lt;p&gt;当前读的语句：update、delete、select for update，会加意向锁和行锁&lt;/p&gt;
&lt;h4 id=&#34;死锁的形成&#34;&gt;死锁的形成
&lt;/h4&gt;&lt;p&gt;例子：如果两个事务都获取了间隔锁，且希望插入对方间隔，则尝试获取插入意向锁（和间隔锁互斥），环路等待导致死锁。&lt;/p&gt;
&lt;h4 id=&#34;insert语句加行级锁&#34;&gt;insert语句加行级锁
&lt;/h4&gt;&lt;p&gt;**记录之间有间隙锁：**加插入意向锁&lt;/p&gt;
&lt;p&gt;注：mysql的锁是先生成锁结构，锁此时是等待状态，再获取锁，如果不能获取则阻塞。&lt;/p&gt;
&lt;p&gt;**唯一键（主键或唯一二级索引）冲突：**失败后加S型锁&lt;/p&gt;
&lt;p&gt;主键：加S记录锁&lt;/p&gt;
&lt;p&gt;唯一二级索引：加S型NK锁&lt;/p&gt;
&lt;p&gt;例子：在select for update中，尝试加X型锁，和S型冲突，所以失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发insert导致的唯一键冲突&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一个insert但事务没提交时，构造隐式锁。&lt;/p&gt;
&lt;p&gt;第二个insert时，隐式锁变成X型锁，和第二个insert想要获取的S型nk锁冲突&lt;/p&gt;
&lt;h4 id=&#34;避免死锁的方法&#34;&gt;避免死锁的方法
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;设置事务等待回滚时间&lt;/strong&gt;：超时回滚&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;innodb_lock_wait_timeout = 50 // default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;开启主动死锁检测：主动回滚&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;innodb_deadlock_detect = on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;日志&#34;&gt;日志
&lt;/h3&gt;&lt;p&gt;保证ACID特性：Atomic, Consisitency, isolation, duration&lt;/p&gt;
&lt;h4 id=&#34;undo-log&#34;&gt;undo log
&lt;/h4&gt;&lt;p&gt;注：对于增删改语句，innodb会隐式启动事务。&lt;/p&gt;
&lt;p&gt;特殊处理：delete只在记录上打标记，真正删除由purge线程完成&lt;/p&gt;
&lt;p&gt;update非主键列：直接update，且在undolog中记录update之前的值&lt;/p&gt;
&lt;p&gt;update主键列：先删再插&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;undolog的存储形式：由roll_pointer指针形成链表穿起来&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;bufferpool&#34;&gt;bufferpool
&lt;/h4&gt;&lt;p&gt;指的是innodb引擎中的内存bufferpool。&lt;/p&gt;
&lt;p&gt;类似于pagecache，由后台线程实现脏页写回机制。&lt;/p&gt;
&lt;p&gt;内存结构：首先申请连续的内存空间，接着按照16kb大小划分出缓存页。&lt;/p&gt;
&lt;p&gt;包括数据页、索引页、undo页、插入缓存页、自适应哈希索引、锁信息等。&lt;/p&gt;
&lt;h4 id=&#34;redolog&#34;&gt;redolog
&lt;/h4&gt;&lt;p&gt;**redolog的作用：**对修改实现持久化。&lt;/p&gt;
&lt;p&gt;WAL技术(write-ahead logging)：在写入磁盘之前先写入redolog。&lt;/p&gt;
&lt;p&gt;每对Bufferpool进行修改就写入redolog，包括undolog的修改&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redolog和undolog对比：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redolog是记录&lt;strong&gt;修改后&lt;/strong&gt;，保证&lt;strong&gt;持久化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;undolog是记录&lt;strong&gt;修改前&lt;/strong&gt;，保证&lt;strong&gt;原子化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写入数据和写入redolog对比：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redolog：是顺序写入，&lt;strong&gt;高效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据：是随机写入，&lt;strong&gt;低效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redolog也有buffer，落盘时机：&lt;/p&gt;
&lt;p&gt;mysql正常关闭，buffer空间超过一半，每一秒写回一次。&lt;/p&gt;
&lt;p&gt;innodb_flush_log_at_trx_commit参数：提交事务时的行为&lt;/p&gt;
&lt;p&gt;0：不写回，后台线程每隔一秒用write()和fsync()&lt;/p&gt;
&lt;p&gt;1：直接持久化到磁盘&lt;/p&gt;
&lt;p&gt;2：写入文件（pagecache）由操作系统写回，后台线程每隔一秒用fsync()&lt;/p&gt;
&lt;p&gt;redolog存储方式：两个redolog文件循环存储类似于环形队列。&lt;/p&gt;
&lt;p&gt;有个tail和head，在tail处写，持久化bufferpool进入数据后更新head。&lt;/p&gt;
&lt;h4 id=&#34;binlog&#34;&gt;binlog
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Server层&lt;/strong&gt;的日志， 用于备份恢复、主从复制。三种格式类型：&lt;/p&gt;
&lt;p&gt;STATEMENT：记录SQL语句逻辑操作&lt;/p&gt;
&lt;p&gt;ROW：记录行数据最终修改情况&lt;/p&gt;
&lt;p&gt;MIXED：根据情况使用STATEMENT或者ROW&lt;/p&gt;
&lt;p&gt;使用追加写，写满文件就创建新文件继续写，全量日志。&lt;/p&gt;
&lt;h5 id=&#34;主从复制&#34;&gt;主从复制
&lt;/h5&gt;&lt;p&gt;主库server层直接写入binlog，后台log dump线程异步将binlog日志发给从库，从库relaylog记录binlog，后台线程异步执行relaylog。&lt;/p&gt;
&lt;p&gt;**从库的数量选择：**对主库的资源消耗、网络带宽。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他模型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同步模型：要所有从库relaylog记录完毕后返回成功，主库再返回客户端。没法用&lt;/p&gt;
&lt;p&gt;异步模型：默认模型，主库宕机就gg&lt;/p&gt;
&lt;p&gt;半同步：一部分库返回成功即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;binlog也有cache，每个线程各一个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久化的时机：&lt;/p&gt;
&lt;p&gt;binlog_cache_size：超过这个大小就写入&lt;/p&gt;
&lt;p&gt;sync_binlog：&lt;/p&gt;
&lt;p&gt;0：只write，操作系统控制写回&lt;/p&gt;
&lt;p&gt;1：write+fsync&lt;/p&gt;
&lt;p&gt;n：write，累积n个以后fsync&lt;/p&gt;
&lt;p&gt;注：binlog在语句执行完成后在记录。事务提交时候才持久化。&lt;/p&gt;
&lt;h5 id=&#34;两阶段提交&#34;&gt;两阶段提交
&lt;/h5&gt;&lt;p&gt;问题：如果redolog和binlog一个完成一个不完成，则会出现主从不一致的问题。&lt;/p&gt;
&lt;p&gt;内部XA事务：在事务提交后开启，由binlog协调。&lt;/p&gt;
&lt;p&gt;将redolog写入拆为prepare和commit，中间插入binlog持久化。&lt;/p&gt;
&lt;p&gt;prepare：将内部XID写入redolog并持久化，将状态设置为prepare。&lt;/p&gt;
&lt;p&gt;commit：将内部XID写入binlog并持久化，接着将redolog设置为commit。&lt;/p&gt;
&lt;p&gt;崩溃时，redolog处于prepare状态，检查binlog中有无XA事务的id，有则提交事务，无则回滚。&lt;/p&gt;
&lt;p&gt;**问题：**性能差&lt;/p&gt;
&lt;p&gt;磁盘IO次数高&lt;/p&gt;
&lt;p&gt;在多事务下，不能保证两者提交顺序一致，需要加锁以保证提交的原子性&lt;/p&gt;
&lt;p&gt;上述问题：binlog组提交机制&lt;/p&gt;
&lt;p&gt;分为flush(write)、sync(fsync)、commit阶段，每个阶段都有队列，用锁保证事务写入顺序。&lt;/p&gt;
&lt;p&gt;redolog的组提交机制&lt;/p&gt;
&lt;p&gt;将redolog刷盘延迟到flush阶段中&lt;/p&gt;
&lt;h4 id=&#34;bufferpool-1&#34;&gt;BufferPool
&lt;/h4&gt;&lt;p&gt;default = 128MB&lt;/p&gt;
&lt;p&gt;each page 16kb&lt;/p&gt;
&lt;p&gt;结构：控制块1到n，接着page1到n&lt;/p&gt;
&lt;p&gt;注：查询时候直接将innodb的整个页加载至bufferpool中，然后在bufferpool中通过页目录定位记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FREE链表&lt;/strong&gt;：管理空闲页，节点是控制块，头结点包括链表头尾地址和控制块数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FLUSH链表&lt;/strong&gt;：管理空闲页，节点是控制块，头结点包括链表头尾地址和控制块数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何管理bufferpool：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传统LRU问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**预读失效：**预读时会把相邻的数据页一并加载，为了减少磁盘IO，如果这些没有被访问，且淘汰末尾页，则降低缓存命中率。&lt;/p&gt;
&lt;p&gt;**解决方法：**划分LRU的优先级，前面是YOUNG，后面是OLD，预读先加入OLD，真正访问才加入YOUNG区域。&lt;/p&gt;
&lt;p&gt;**缓存污染：**当扫描大量数据，会淘汰大量热数据，导致命中率下降。&lt;/p&gt;
&lt;p&gt;**解决方法：**提高加入YOUNG的门槛，记录第一次OLD被访问的时间，如果后续访问时间超过第一次1s，则放入young区域。&lt;/p&gt;
&lt;p&gt;**Linux的做法：**第二次的时候将才升级到active，比MYSQL简单。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
