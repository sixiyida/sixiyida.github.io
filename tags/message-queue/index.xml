<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Message Queue on sixiyida</title>
        <link>https://sixiyida.github.io/tags/message-queue/</link>
        <description>Recent content in Message Queue on sixiyida</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>sixiyida</copyright>
        <lastBuildDate>Wed, 28 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sixiyida.github.io/tags/message-queue/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Message Queue</title>
        <link>https://sixiyida.github.io/p/message-queue/</link>
        <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
        
        <guid>https://sixiyida.github.io/p/message-queue/</guid>
        <description>&lt;h3 id=&#34;为什么需要消息队列&#34;&gt;为什么需要消息队列？
&lt;/h3&gt;&lt;p&gt;在异步任务，如生产者-消费者模型中，两者的运行速度并不相同，使用消息队列可以做一个缓冲，减小系统压力。&lt;/p&gt;
&lt;h3 id=&#34;redis消息队列&#34;&gt;Redis消息队列
&lt;/h3&gt;&lt;h4 id=&#34;1-基于list&#34;&gt;1. 基于List
&lt;/h4&gt;&lt;p&gt;Redis的list数据结构是一个双向链表，利用&lt;code&gt;LPUSH&lt;/code&gt;和&lt;code&gt;RPOP&lt;/code&gt;实现，若需要阻塞，使用&lt;code&gt;BRPOP&lt;/code&gt;实现阻塞队列效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺陷&lt;/strong&gt;：每次取出消息直接从队列中移除，造成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法避免消息丢失：移除后如果宕机，则消息丢失。&lt;/li&gt;
&lt;li&gt;无法有多消费者：只能消费一次并移除，无法多次消费。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-基于pubsub&#34;&gt;2. 基于Pub/Sub
&lt;/h4&gt;&lt;p&gt;类似ROS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SUBSCRIBE channel [channel] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PUBLISH channel msg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PSUBSCRIBE pattern [pattern] // 订阅匹配pattern的所有频道
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;缺陷&lt;/strong&gt;：每次取出消息直接从队列中移除，造成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不支持数据持久化：数据不在Redis（内存）中保存。&lt;/li&gt;
&lt;li&gt;无法避免消息丢失：如上。&lt;/li&gt;
&lt;li&gt;消息堆积有上限，超出时丢失：只在消费者处缓存，有上限。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-基于stream&#34;&gt;3. 基于Stream
&lt;/h4&gt;&lt;p&gt;Stream是一种为消息队列设计的数据类型。&lt;/p&gt;
&lt;h5 id=&#34;基本添加读取消息&#34;&gt;基本添加/读取消息
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XADD users * name jack age 21 // 向user发{name = jack, age = 21}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sixiyida.github.io/p/message-queue/stream.png&#34;
	width=&#34;1572&#34;
	height=&#34;213&#34;
	srcset=&#34;https://sixiyida.github.io/p/message-queue/stream_hu_7e20dd5e9822ab68.png 480w, https://sixiyida.github.io/p/message-queue/stream_hu_d49a0456e8654272.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;stream&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;738&#34;
		data-flex-basis=&#34;1771px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XREAD COUNT 1 BLOCK 2000 STREAMS users $ // 读users最新的1个消息，无消息阻塞2秒
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sixiyida.github.io/p/message-queue/read.png&#34;
	width=&#34;1474&#34;
	height=&#34;295&#34;
	srcset=&#34;https://sixiyida.github.io/p/message-queue/read_hu_1f1aaebb68b4f0a.png 480w, https://sixiyida.github.io/p/message-queue/read_hu_5535dc8fe45dfaf2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;read&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;消费者组&#34;&gt;消费者组
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;消息分流&lt;/strong&gt;：队列中消息分流而不是重复消费，加快速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息表示&lt;/strong&gt;：记录最后一个被处理的消息，宕机后也能恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息确认&lt;/strong&gt;：消息被获取后存入pending-list，必须要消费者使用XACK确认消息，才会移除。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XGROUP CREATE mqName groupName ID [MKSTREAM] // ID(0):第一个消息/ID($):最后一个消息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 为mqName创建名为groupName的消费者组
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XGROUP DESTROY mqName groupName
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XGROUP CREATECONSUMER mqName groupName consumerName
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XGROUP DELCONSUMER mqName groupName consumerName
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS mqName [mqName ...] ID [ID ...] //ID为获取消息起始id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//&amp;#34;&amp;gt;&amp;#34; : 从未消费消息开始
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//“数字”: 从pending-list中第一个消息开始
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
